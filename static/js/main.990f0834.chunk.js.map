{"version":3,"sources":["store/reducers.js","serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","store/actions.js","store/actionTypes.js","index.js"],"names":["initialStateSearch","searchField","initialStateRobots","isPending","robots","error","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","Card","props","id","name","email","react_default","a","createElement","className","src","concat","alt","CardList","_ref","cardComponent","map","robot","i","components_Card","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflow","border","height","children","ErrorBoundry","hasError","componentDidCatch","_this","setState","this","React","Component","App","onRequestRobots","_this$props","onSearchChange","filteredRobots","filter","toLowerCase","includes","components_SearchBox","components_Scroll","components_ErrorBoundry","src_components_CardList","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","Object","asyncToGenerator","regenerator_default","mark","_callee","data","json","wrap","_context","prev","next","fetch","sent","t0","stop","_x","apply","arguments","rootReducer","combineReducers","length","undefined","action","objectSpread","store","createStore","composeWithDevTools","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","URL","process","href","origin","addEventListener","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.990f0834.chunk.js","sourcesContent":["import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from './actionTypes';\n\nconst initialStateSearch = {\n  searchField: ''\n};\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n  switch(action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return {...state, searchField: action.payload};\n    default:\n      return state;\n  }\n}\n\nconst initialStateRobots = {\n  isPending: false,\n  robots: [],\n  error: ''\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n  switch(action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return {...state, isPending: true}\n    case REQUEST_ROBOTS_SUCCESS:\n      return {...state, robots: action.payload, isPending: false}\n    case REQUEST_ROBOTS_FAILED:\n      return {...state, error: action.payload, isPending: false}\n    default:\n      return state;\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\n\nconst Card = (props) => {\n  const {id, name, email } = props;\n\n  return (\n    <div className=\"bg-light-green dib br2 pa3 ma2 grow bw2 shadow-5\">\n      <img src={`https://robohash.org/${id}?200x200`} alt=\"robots\" />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nimport './CardList.css';\n\nconst CardList = ({robots}) => {\n  const cardComponent = robots.map((robot, i) => {\n    return <Card key={i} id={robot.id} name={robot.name} email={robot.email} />\n  });\n\n  return (\n    <div>\n      {cardComponent}\n    </div>\n  );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchChange }) => {\n  return (\n    <div className=\"pd2\">\n      <input\n        className=\"pa3 ma3 ba b--green bg-lightest-blue\"\n        type=\"search\"\n        placeholder=\"search robots\"\n        onChange={searchChange}\n        />\n    </div>\n  );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{ overflow: 'scroll', border: '1px solid black', height: '800px'}}>\n      {props.children}\n    </div>\n  );\n}\n\nexport default Scroll;","import React from 'react';\n\nclass ErrorBoundry extends React.Component {\n  state = {\n    hasError: false\n  }\n\n  componentDidCatch = () => {\n    this.setState({ hasError: true })\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>This is embarrassing, something broke...</h1>;\n    }\n    return this.props.children;\n  }\n};\n\nexport default ErrorBoundry;","import React from \"react\";\nimport CardList from \"../components/CardList\";\nimport SearchBox from \"../components/SearchBox\";\nimport Scroll from \"../components/Scroll\";\nimport ErrorBoundry from \"../components/ErrorBoundry\";\nimport { setSearchField, requestRobots } from \"../store/actions\";\nimport { connect } from \"react-redux\";\n\nimport \"./App.css\";\n\nclass App extends React.Component {\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  render() {\n    const { searchField, onSearchChange, robots, isPending } = this.props;\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n    return isPending ? (\n      <h1 className=\"tc\">Loading</h1>\n    ) : (\n      <div className=\"tc\">\n        <h1 className=\"f1\">RoboFriends</h1>\n        <SearchBox searchChange={onSearchChange} />\n        <Scroll>\n          <ErrorBoundry>\n            <CardList robots={filteredRobots} />\n          </ErrorBoundry>\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSearchChange: event => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from \"./actionTypes\";\n\nexport const setSearchField = text => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text\n});\n\nexport const requestRobots = () => async dispatch => {\n  try {\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\n    const data = await fetch(\n      \"https://cors-anywhere.herokuapp.com/https://jsonplaceholder.typicode.com/users\"\n    );\n    const json = await data.json();\n    dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: json });\n  } catch (err) {\n    dispatch({ type: REQUEST_ROBOTS_FAILED, payload: err });\n  }\n};\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport { searchRobots, requestRobots } from \"./store/reducers\";\nimport thunkMiddleware from \"redux-thunk\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport App from \"./containers/App\";\n\nimport \"tachyons\";\nimport \"./index.css\";\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunkMiddleware))\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}