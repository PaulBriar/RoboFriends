{"version":3,"sources":["store/reducers.js","serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","store/actions.js","store/constants.js","index.js"],"names":["initialState","searchField","Boolean","window","location","hostname","match","Card","props","id","name","email","react_default","a","createElement","className","src","concat","alt","CardList","_ref","cardComponent","robots","map","robot","i","components_Card","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflow","border","height","children","ErrorBoundry","state","hasError","componentDidCatch","_this","setState","this","React","Component","App","componentDidMount","_callee","data","json","regenerator_default","wrap","_context","prev","next","fetch","sent","stop","_this$props","onSearchChange","filteredRobots","filter","toLowerCase","includes","length","components_SearchBox","components_Scroll","components_ErrorBoundry","src_components_CardList","connect","dispatch","event","payload","target","value","logger","createLogger","store","createStore","arguments","undefined","action","Object","objectSpread","applyMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6PAEMA,EAAe,CACnBC,YAAa,YCSKC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,6HCFSC,EAdF,SAACC,GAAU,IACfC,EAAoBD,EAApBC,GAAIC,EAAgBF,EAAhBE,KAAMC,EAAUH,EAAVG,MAEjB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oDACbH,EAAAC,EAAAC,cAAA,OAAKE,IAAG,wBAAAC,OAA0BR,EAA1B,YAAwCS,IAAI,WACpDN,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAKJ,GACLE,EAAAC,EAAAC,cAAA,SAAIH,MCOGQ,SAZE,SAAAC,GAAc,IACvBC,EADuBD,EAAZE,OACYC,IAAI,SAACC,EAAOC,GACvC,OAAOb,EAAAC,EAAAC,cAACY,EAAD,CAAMC,IAAKF,EAAGhB,GAAIe,EAAMf,GAAIC,KAAMc,EAAMd,KAAMC,MAAOa,EAAMb,UAGpE,OACEC,EAAAC,EAAAC,cAAA,WACGO,KCGQO,EAbG,SAAAR,GAAsB,IAAnBS,EAAmBT,EAAnBS,aACnB,OACEjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,SACEC,UAAU,uCACVe,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCCHI,EARA,SAACzB,GACd,OACEI,EAAAC,EAAAC,cAAA,OAAKoB,MAAO,CAAEC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,UAClE7B,EAAM8B,WCcEC,6MAhBbC,MAAQ,CACNC,UAAU,KAGZC,kBAAoB,WAClBC,EAAKC,SAAS,CAAEH,UAAU,6EAI1B,OAAII,KAAKL,MAAMC,SACN7B,EAAAC,EAAAC,cAAA,sDAEF+B,KAAKrC,MAAM8B,gBAbKQ,IAAMC,WCQ3BC,oNACJR,MAAQ,CACNlB,OAAQ,MAGV2B,uCAAmB,SAAAC,IAAA,IAAAC,EAAAC,EAAA,OAAAC,EAAAxC,EAAAyC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACEC,MAAM,8CADR,cACXP,EADWI,EAAAI,KAAAJ,EAAAE,KAAA,EAEEN,EAAKC,OAFP,OAEXA,EAFWG,EAAAI,KAGjBhB,EAAKC,SAAS,CAAEtB,OAAQ8B,IAHP,wBAAAG,EAAAK,SAAAV,8EAMV,IACC5B,EAAWuB,KAAKL,MAAhBlB,OADDuC,EAEiChB,KAAKrC,MAArCP,EAFD4D,EAEC5D,YAAa6D,EAFdD,EAEcC,eACfC,EAAiBzC,EAAO0C,OAAO,SAAAxC,GACnC,OAAOA,EAAMd,KAAKuD,cAAcC,SAASjE,EAAYgE,iBAEvD,OAAQ3C,EAAO6C,OAGbvD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MAAd,eACAH,EAAAC,EAAAC,cAACsD,EAAD,CAAWvC,aAAciC,IACzBlD,EAAAC,EAAAC,cAACuD,EAAD,KACEzD,EAAAC,EAAAC,cAACwD,EAAD,KACE1D,EAAAC,EAAAC,cAACyD,EAAD,CAAUjD,OAAQyC,OAPxBnD,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MAAd,kBAlBY+B,IAAMC,YA6CTyB,cAZS,SAAAhC,GACtB,MAAO,CACLvC,YAAauC,EAAMvC,cAII,SAAAwE,GACzB,MAAO,CACLX,eAAgB,SAACY,GAAD,OAAWD,ECjDU,CACvC3C,KCHiC,sBDIjC6C,QD+CqDD,EAAME,OAAOC,WAIrDL,CAA6CxB,GG1CtD8B,eAASC,0BACTC,EAAQC,YVRc,WAAuC,IAAtCzC,EAAsC0C,UAAAf,OAAA,QAAAgB,IAAAD,UAAA,GAAAA,UAAA,GAA9BlF,EAAcoF,EAAgBF,UAAAf,OAAA,QAAAgB,IAAAD,UAAA,GAAAA,UAAA,GAAP,GAC1D,OAAOE,EAAOtD,MACZ,ISR+B,sBTS7B,OAAOuD,OAAAC,EAAA,EAAAD,CAAA,GAAI7C,EAAX,CAAkBvC,YAAamF,EAAOT,UACxC,QACE,OAAOnC,IUG2B+C,YAAgBT,IAExDU,IAASC,OAAO7E,EAAAC,EAAAC,cAAC4E,EAAA,EAAD,CAAUV,MAAOA,GAAOpE,EAAAC,EAAAC,cAAC6E,EAAD,OAAoBC,SAASC,eAAe,STiH9E,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f3412f4d.chunk.js","sourcesContent":["import { CHANGE_SEARCH_FIELD } from './constants';\r\n\r\nconst initialState = {\r\n  searchField: ''\r\n};\r\n\r\nexport const searchRobots = (state = initialState, action = {}) => {\r\n  switch(action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      return {...state, searchField: action.payload};\r\n    default:\r\n      return state;\r\n  }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\n\r\nconst Card = (props) => {\r\n  const {id, name, email } = props;\r\n\r\n  return (\r\n    <div className=\"bg-light-green dib br2 pa3 ma2 grow bw2 shadow-5\">\r\n      <img src={`https://robohash.org/${id}?200x200`} alt=\"robots\" />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nimport './CardList.css';\r\n\r\nconst CardList = ({robots}) => {\r\n  const cardComponent = robots.map((robot, i) => {\r\n    return <Card key={i} id={robot.id} name={robot.name} email={robot.email} />\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      {cardComponent}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n  return (\r\n    <div className=\"pd2\">\r\n      <input\r\n        className=\"pa3 ma3 ba b--green bg-lightest-blue\"\r\n        type=\"search\"\r\n        placeholder=\"search robots\"\r\n        onChange={searchChange}\r\n        />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div style={{ overflow: 'scroll', border: '1px solid black', height: '800px'}}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Scroll;","import React from 'react';\r\n\r\nclass ErrorBoundry extends React.Component {\r\n  state = {\r\n    hasError: false\r\n  }\r\n\r\n  componentDidCatch = () => {\r\n    this.setState({ hasError: true })\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return <h1>This is embarrassing, something broke...</h1>;\r\n    }\r\n    return this.props.children;\r\n  }\r\n};\r\n\r\nexport default ErrorBoundry;","import React from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport { setSearchField } from '../store/actions';\nimport { connect } from 'react-redux';\n\nimport './App.css';\n\nclass App extends React.Component {\n  state = {\n    robots: [],\n  };\n\n  componentDidMount= async () => {\n    const data = await fetch('https://jsonplaceholder.typicode.com/users');\n    const json = await data.json();\n    this.setState({ robots: json });\n  }\n\n  render() {\n    const { robots } = this.state;\n    const { searchField, onSearchChange } = this.props;\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n    return !robots.length ?\n      <h1 className='tc'>Loading</h1> :\n    (\n      <div className=\"tc\">\n        <h1 className=\"f1\">RoboFriends</h1>\n        <SearchBox searchChange={onSearchChange}/>\n        <Scroll>\n          <ErrorBoundry>\n            <CardList robots={filteredRobots} />\n          </ErrorBoundry>\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchField\n  }\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value))\n  }\n };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { CHANGE_SEARCH_FIELD } from './constants';\r\n\r\nexport const setSearchField = (text) => ({\r\n  type: CHANGE_SEARCH_FIELD,\r\n  payload: text\r\n});","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport { searchRobots } from './store/reducers';\nimport {createLogger } from 'redux-logger';\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './containers/App';\n\nimport 'tachyons';\nimport './index.css';\n\nconst logger = createLogger();\nconst store = createStore(searchRobots, applyMiddleware(logger));\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}